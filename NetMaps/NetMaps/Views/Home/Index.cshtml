@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Primeiro Tutorial com LeafLet</h1>

    <div id="map">
    </div>

</div>

@section Scripts {
    <script>
        $(document).ready(function () {

            var cordinates = undefined;
            var carregou = false;

            var loadMaps = function(latitude, longitude){
                console.log("loadMaps");
                console.log("latitude", latitude);
                console.log("longitude", longitude);

                var osmUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
                    osmAttrib = '&copy; <a href="http://openstreetmap.org/copyright">BR Serviços </a>',
                    osm = L.tileLayer(osmUrl, { maxZoom: 20, attribution: osmAttrib }),
                    map = new L.Map('map', {
                        //minZoom:20,
                        //maxZoom: 100,
                        center: new L.LatLng(latitude, longitude),
                        zoom: 15
                    }),
                    drawnItems = L.featureGroup().addTo(map);

                L.control.layers({
                    'Cartográfico': osm.addTo(map),
                    //"Other": L.tileLayer('http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', { attribution: '<a href="http://www.esri.com/">Esri</a>', maxZoom: 18 },
                    "Vegetação": L.tileLayer('http://www.google.cn/maps/vt?lyrs=s@189&gl=cn&x={x}&y={y}&z={z}', { attribution: 'google', maxZoom: 20 },
                    )
                    },
                    {
                        'Visualizar': drawnItems
                    },
                    {
                        position: 'topright',
                        collapsed: false
                    })
                    .addTo(map);

                L.marker([latitude, longitude]).addTo(map);

                L.polygon([
                    [-26.73680420892953, -52.742064893245704],
                    [-26.738227087915497, -52.740509212017066],
                    [-26.73843788328836, -52.74073451757432],
                    [-26.738639096688892, -52.741029560565956],
                    [-26.73869658616652, -52.741131484508514],
                    [-26.738734912468797, -52.74124413728715],
                    [-26.738806774250737, -52.74137288331986],
                    [-26.737436601787604, -52.742826640605934],
                    [-26.737403065890994, -52.742553055286415],
                    [-26.737168314337858, -52.74216145277024]
                ], {
                    color: '#405189',
                    fillColor: '#405189',
                }).addTo(map);

                map.addControl(new L.Control.Draw({
                    edit: {
                        featureGroup: drawnItems,
                        poly: {
                            allowIntersection: false
                        }
                    },
                    draw: {
                        polygon: {
                            allowIntersection: false,
                            showArea: true
                        },
                        marker: true, //Ponto de Localização
                        circlemarker: false, //Circulo de Localização
                        circle: false, //Circulo de Localização
                        rectangle: false, //Circulo de Localização
                        polyline: false, //Circulo de Localização
                    }
                }));

                map.on(L.Draw.Event.CREATED, function (event) {

                    var layer = event.layer;


                    let type = event.layerType;

                    if (type === 'polygon') {
                        cordinates = layer.getLatLngs();
                        console.log("Coordenadas: ", cordinates);

                        var area = L.GeometryUtil.geodesicArea(cordinates[0]);
                        var readableArea = L.GeometryUtil.readableArea(area, true);
                        console.log("Área: ", readableArea);
                    }

                    drawnItems.addLayer(layer);
                });
            };

            if ("geolocation" in navigator) {

                const watcher = navigator.geolocation.watchPosition(function(position){
                    console.log("Posição:", position);
                    if (carregou === false){
                        loadMaps(position.coords.latitude, position.coords.longitude);
                        carregou = true;
                    }
                }, function(error){
                    console.log(error);
                },{ enableHighAccuracy: true, maximumAge: 30000, timeout: 30000 });

            } else {
                alert("I'm sorry, but geolocation services are not supported by your browser.");
            }
        });
    </script>
}
